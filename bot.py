#!/usr/bin/env python3
"""
Telegram Bot - Multi File + Channel ID + Caption Replace
‚úÖ Features:
- /start in DM ‚Üí setup remove/add word & channel
- /id in channel ‚Üí show channel id automatically (even if no reply possible)
- Accepts multiple videos or PDFs (up to 100)
- Sends to channel in same order as received
"""

import os
import re
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

ASK_REMOVE, ASK_ADD, ASK_CHANNEL, ASK_MEDIA = range(4)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---------------- /start -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat

    # If used inside a channel ‚Äî just show ID
    if chat.type in ["channel", "supergroup"]:
        await context.bot.send_message(
            chat_id=chat.id,
            text=f"üì¢ Channel Name: {chat.title}\nüÜî Channel ID: `{chat.id}`",
            parse_mode="Markdown"
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç caption ‡§∏‡•á ‡§ï‡•ã‡§à word ‡§π‡§ü‡§æ‡§ï‡§∞ ‡§®‡§Ø‡§æ word ‡§°‡§æ‡§≤ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å ‡§î‡§∞ ‡§µ‡§π‡•Ä ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ü‡§™‡§ï‡•á channel ‡§™‡§∞ ‡§≠‡•á‡§ú ‡§¶‡•Ç‡§Å‡•§\n\n"
        "‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§µ‡•ã word ‡§≠‡•á‡§ú‡§ø‡§è ‡§ú‡•ã ‡§π‡§ü‡§æ‡§®‡§æ ‡§π‡•à (‡§â‡§¶‡§æ‡§π‡§∞‡§£: @OldName)"
    )
    return ASK_REMOVE


# ---------------- Step 1 -----------------
async def ask_remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["remove_word"] = update.message.text.strip()
    await update.message.reply_text("‚úÖ ‡§π‡§ü‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ word ‡§Æ‡§ø‡§≤‡§æ!\n‡§Ö‡§¨ ‡§µ‡•ã word ‡§≠‡•á‡§ú‡§ø‡§è ‡§ú‡•ã ‡§â‡§∏‡§ï‡•Ä ‡§ú‡§ó‡§π ‡§°‡§æ‡§≤‡§®‡§æ ‡§π‡•à‡•§")
    return ASK_ADD


# ---------------- Step 2 -----------------
async def ask_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["add_word"] = update.message.text.strip()
    await update.message.reply_text(
        "‚úÖ ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§µ‡§æ‡§≤‡§æ word ‡§Æ‡§ø‡§≤‡§æ!\n‡§Ö‡§¨ ‡§µ‡•ã Channel ID ‡§≠‡•á‡§ú‡§ø‡§è ‡§ú‡§π‡§æ‡§Å upload ‡§ï‡§∞‡§µ‡§æ‡§®‡§æ ‡§π‡•à‡•§\n\n"
        "üëâ Hint: Bot ‡§ï‡•ã ‡§Ö‡§™‡§®‡•á channel ‡§Æ‡•á‡§Ç add ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§µ‡§π‡§æ‡§Å `/id` ‡§ö‡§≤‡§æ‡§è‡§Å ‡§§‡§æ‡§ï‡§ø ID ‡§Æ‡§ø‡§≤ ‡§∏‡§ï‡•á‡•§"
    )
    return ASK_CHANNEL


# ---------------- Step 3 -----------------
async def ask_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["channel"] = update.message.text.strip()
    context.user_data["queue"] = []
    await update.message.reply_text(
        "‚úÖ Channel ID ‡§∏‡•á‡§ü ‡§π‡•ã ‡§ó‡§à!\n‡§Ö‡§¨ ‡§Ü‡§™ ‡§ú‡§ø‡§§‡§®‡•Ä ‡§ö‡§æ‡§π‡•á‡§Ç videos ‡§Ø‡§æ PDFs (100 ‡§§‡§ï) ‡§≠‡•á‡§ú‡§ø‡§è‡•§\n"
        "‡§Æ‡•à‡§Ç ‡§∏‡§¨‡§ï‡•ã ‡§â‡§∏‡•Ä ‡§ï‡•ç‡§∞‡§Æ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•á channel ‡§™‡§∞ ‡§≠‡•á‡§ú ‡§¶‡•Ç‡§Å‡•§"
    )
    return ASK_MEDIA


# ---------------- Step 4: Collect media -----------------
async def collect_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    queue = data.get("queue", [])

    # store media info
    media_item = {
        "video": update.message.video.file_id if update.message.video else None,
        "document": update.message.document.file_id if update.message.document else None,
        "caption": update.message.caption or ""
    }

    queue.append(media_item)
    context.user_data["queue"] = queue

    await update.message.reply_text(f"üì¶ ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ ({len(queue)} files total)\n"
                                    "‡§ú‡§¨ ‡§∏‡§¨ ‡§≠‡•á‡§ú ‡§¶‡•ã, ‡§§‡§¨ /upload ‡§≤‡§ø‡§ñ‡•ã‡•§")
    return ASK_MEDIA


# ---------------- Step 5: Upload all -----------------
async def upload_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    queue = data.get("queue", [])
    remove_word = data.get("remove_word", "")
    add_word = data.get("add_word", "")
    channel = data.get("channel", "")

    if not queue:
        await update.message.reply_text("‚ö†Ô∏è ‡§ï‡•ã‡§à video ‡§Ø‡§æ PDF ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§")
        return ASK_MEDIA

    await update.message.reply_text(f"üöÄ Upload ‡§∂‡•Å‡§∞‡•Ç ‚Äî {len(queue)} files ‡§≠‡•á‡§ú‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç...")

    count = 0
    for item in queue:
        caption = re.sub(re.escape(remove_word), add_word, item["caption"])
        try:
            if item["video"]:
                await context.bot.send_video(chat_id=channel, video=item["video"], caption=caption)
            elif item["document"]:
                await context.bot.send_document(chat_id=channel, document=item["document"], caption=caption)
            count += 1
        except Exception as e:
            await update.message.reply_text(f"‚ùå Error on file {count+1}: {e}")

    await update.message.reply_text(f"‚úÖ Upload ‡§™‡•Ç‡§∞‡§æ! {count}/{len(queue)} files ‡§≠‡•á‡§ú ‡§¶‡•Ä ‡§ó‡§à‡§Ç‡•§")
    data["queue"].clear()
    return ConversationHandler.END


# ---------------- Channel ID command -----------------
async def channel_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    try:
        await context.bot.send_message(
            chat_id=chat.id,
            text=f"üì¢ Channel Name: {chat.title}\nüÜî Channel ID: `{chat.id}`",
            parse_mode="Markdown"
        )
    except Exception:
        # If message is None (in channel post), send via bot directly
        await context.bot.send_message(
            chat_id=chat.id,
            text=f"üÜî Channel ID: `{chat.id}`",
            parse_mode="Markdown"
        )


# ---------------- MAIN -----------------
def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("BOT_TOKEN not found in environment variables!")

    app = ApplicationBuilder().token(token).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_REMOVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_remove)],
            ASK_ADD: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_add)],
            ASK_CHANNEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_channel)],
            ASK_MEDIA: [
                MessageHandler(filters.VIDEO | filters.Document.ALL, collect_media),
                CommandHandler("upload", upload_all),
            ],
        },
        fallbacks=[],
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("id", channel_id))
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
