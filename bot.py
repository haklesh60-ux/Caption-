#!/usr/bin/env python3
"""
Telegram Bot (Auto Channel ID Detection)
‚úÖ Features:
- If /start used in channel ‚Üí auto send channel ID
- If /start used in DM ‚Üí normal caption edit setup
- Replace word in caption & upload to selected channel
"""

import os
import re
import logging
from telegram import Update, Chat
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

ASK_REMOVE, ASK_ADD, ASK_CHANNEL, ASK_MEDIA = range(4)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- START COMMAND ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat

    # if started inside a channel
    if chat.type in ["channel", "supergroup"]:
        await update.message.reply_text(
            f"üì¢ Channel Name: {chat.title}\nüÜî Channel ID: `{chat.id}`\n\n"
            "‡§Ö‡§¨ ‡§á‡§∏ Channel ID ‡§ï‡•ã ‡§Ö‡§™‡§®‡•á private chat ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú ‡§¶‡•ã ‡§ú‡§π‡§æ‡§Å ‡§§‡•Å‡§Æ‡§®‡•á /start ‡§ï‡§ø‡§Ø‡§æ ‡§•‡§æ‡•§"
        )
        return ConversationHandler.END

    # if started in private chat
    await update.message.reply_text(
        "üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç caption ‡§∏‡•á ‡§ï‡•ã‡§à word ‡§π‡§ü‡§æ‡§ï‡§∞ ‡§®‡§Ø‡§æ word ‡§°‡§æ‡§≤ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å ‡§î‡§∞ ‡§µ‡§π‡•Ä ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ü‡§™‡§ï‡•á channel ‡§™‡§∞ ‡§≠‡•á‡§ú ‡§¶‡•Ç‡§Å‡•§\n\n"
        "‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§µ‡•ã word ‡§≠‡•á‡§ú‡§ø‡§è ‡§ú‡•ã ‡§π‡§ü‡§æ‡§®‡§æ ‡§π‡•à (‡§â‡§¶‡§æ‡§π‡§∞‡§£: @RexodasEmpire)"
    )
    return ASK_REMOVE


# --- ASK REMOVE WORD ---
async def ask_remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["remove_word"] = update.message.text.strip()
    await update.message.reply_text("‚úÖ ‡§π‡§ü‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ word ‡§Æ‡§ø‡§≤‡§æ!\n‡§Ö‡§¨ ‡§µ‡•ã word ‡§≠‡•á‡§ú‡§ø‡§è ‡§ú‡•ã ‡§â‡§∏‡§ï‡•Ä ‡§ú‡§ó‡§π ‡§°‡§æ‡§≤‡§®‡§æ ‡§π‡•à‡•§")
    return ASK_ADD


# --- ASK ADD WORD ---
async def ask_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["add_word"] = update.message.text.strip()
    await update.message.reply_text(
        "‚úÖ ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§µ‡§æ‡§≤‡§æ word ‡§Æ‡§ø‡§≤‡§æ!\n‡§Ö‡§¨ ‡§µ‡•ã Channel ID ‡§≠‡•á‡§ú‡§ø‡§è ‡§ú‡§π‡§æ‡§Å upload ‡§ï‡§∞‡§µ‡§æ‡§®‡§æ ‡§π‡•à‡•§\n\n"
        "üëâ Hint: Bot ‡§ï‡•ã ‡§Ö‡§™‡§®‡•á channel ‡§Æ‡•á‡§Ç add ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§µ‡§π‡§æ‡§Å `/start` ‡§ö‡§≤‡§æ‡§è‡§Å ‡§§‡§æ‡§ï‡§ø ID ‡§Æ‡§ø‡§≤ ‡§∏‡§ï‡•á‡•§"
    )
    return ASK_CHANNEL


# --- ASK CHANNEL ID ---
async def ask_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["channel"] = update.message.text.strip()
    await update.message.reply_text("‚úÖ Channel ID ‡§∏‡•á‡§ü ‡§π‡•ã ‡§ó‡§à!\n‡§Ö‡§¨ ‡§µ‡•ã video ‡§Ø‡§æ PDF ‡§≠‡•á‡§ú‡§ø‡§è ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç caption ‡§π‡•à‡•§")
    return ASK_MEDIA


# --- PROCESS MEDIA ---
async def ask_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    remove_word = data.get("remove_word")
    add_word = data.get("add_word")
    channel = data.get("channel")

    caption = update.message.caption or ""
    new_caption = re.sub(re.escape(remove_word), add_word, caption)

    try:
        if update.message.video:
            await context.bot.send_video(
                chat_id=channel,
                video=update.message.video.file_id,
                caption=new_caption,
            )
        elif update.message.document:
            await context.bot.send_document(
                chat_id=channel,
                document=update.message.document.file_id,
                caption=new_caption,
            )
        await update.message.reply_text("‚úÖ File ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≠‡•á‡§ú ‡§¶‡•Ä ‡§ó‡§à!")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è Error: {e}")

    return ConversationHandler.END


# --- MAIN FUNCTION ---
def main():
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_REMOVE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_remove)],
            ASK_ADD: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_add)],
            ASK_CHANNEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_channel)],
            ASK_MEDIA: [MessageHandler((filters.VIDEO | filters.Document.ALL), ask_media)],
        },
        fallbacks=[],
    )

    app.add_handler(conv)
    app.run_polling()


if __name__ == "__main__":
    main()
